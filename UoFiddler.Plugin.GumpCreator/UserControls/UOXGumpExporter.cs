using System;
using System.Collections.Generic;
using System.Windows.Forms;
using System.Drawing;
using System.IO;
using System.Text.Json; 
using System.Text;
using System.Linq;

namespace UoFiddler.Plugin.GumpCreator.UserControls {
    public static class UOXGumpExporter
    {
        public static void Export(IWin32Window owner, List<CanvasElement> canvasItems, bool isClosable, bool isMovable, bool isDisposable)
        {
            if (!canvasItems.Any())
            {
                MessageBox.Show(owner, "Canvas is empty. Add some gumps first!", "Export UOX3 Gump Script", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("// Gump Definition Generated by UOFiddler Gump Creator Plugin (UOX3 JS)");
            sb.AppendLine("function onUseChecked(pUser, iUsed)");
            sb.AppendLine("{");
            sb.AppendLine("\tvar myGump = new Gump;");

            if (!isClosable)
                sb.AppendLine("\tmyGump.NoClose();");
            if (!isMovable)
                sb.AppendLine("\tmyGump.NoMove();");
            if (!isDisposable)
                sb.AppendLine("\tmyGump.NoDispose();");

            sb.AppendLine();

            var itemsByPage = canvasItems.GroupBy(item => item.Page).OrderBy(g => g.Key);
            int textID = 0;

            foreach (var pageGroup in itemsByPage)
            {
                sb.AppendLine($"\tmyGump.AddPage({pageGroup.Key});");

                foreach (var element in pageGroup)
                {
                    if (element is CanvasGumpPicItem gumpPic)
                    {
                        sb.AppendLine($"\tmyGump.AddGump({gumpPic.Y}, {gumpPic.X}, {gumpPic.GumpId}, {gumpPic.Hue});");
                    }
                    else if (element is CanvasTextItem textItem)
                    {
                        string escapedText = textItem.Text.Replace("\"", "\\\"");
                        sb.AppendLine($"\tmyGump.AddText({textItem.Y}, {textItem.X}, {textItem.TextColorHue}, \"{escapedText}\");");
                        textID++;
                    }
                    else if (element is CanvasButtonItem buttonItem)
                    {
                        sb.AppendLine($"\tmyGump.AddButton({buttonItem.Y}, {buttonItem.X}, {buttonItem.ReleasedGumpId}, 1, {buttonItem.ReturnValue}, {buttonItem.TargetPageId});");
                    }
                    else if (element is CanvasCheckboxItem checkbox)
                    {
                        sb.AppendLine($"\tmyGump.AddCheckbox({checkbox.Y}, {checkbox.X}, {checkbox.UncheckedId}, {(checkbox.InitialStatus ? 1 : 0)}, {checkbox.ButtonValue});");
                    }
                    else if (element is CanvasRadioButtonItem radioButton)
                    {
                        sb.AppendLine($"\tmyGump.AddRadio({radioButton.Y}, {radioButton.X}, {radioButton.UnpressedId}, {(radioButton.InitialStatus ? 1 : 0)}, {radioButton.ButtonValue});");
                    }
                    else if (element is CanvasTextEntryItem textEntry)
                    {
                        string safeText = textEntry.InitialText?.Replace("\"", "\\\"") ?? "";
                        sb.AppendLine($"\tmyGump.AddTextEntry({textEntry.Y}, {textEntry.X}, {textEntry.Width}, {textEntry.Height}, {textEntry.TextColorHue}, 1, {textID}, \"{safeText}\");");
                        textID++;
                    }
                }

                sb.AppendLine();
            }

            sb.AppendLine("\tmyGump.Send(pUser.socket);");
            sb.AppendLine("\tmyGump.Free();");
            sb.AppendLine("\treturn false;");
            sb.AppendLine("}");

            using (var textDialog = new Form())
            {
                textDialog.Text = "Exported UOX3 Gump Script";
                textDialog.Size = new Size(700, 750);
                textDialog.StartPosition = FormStartPosition.CenterParent;
                var textBox = new TextBox
                {
                    Multiline = true,
                    Dock = DockStyle.Fill,
                    ScrollBars = ScrollBars.Both,
                    ReadOnly = true,
                    Font = new Font("Consolas", 10),
                    Text = sb.ToString()
                };
                textDialog.Controls.Add(textBox);
                textDialog.ShowDialog(owner);
            }
        }
    }

}