using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms; // For MessageBox, IWin32Window
using System.Drawing; // For Font, Size, FormStartPosition

namespace UoFiddler.Plugin.GumpCreator.UserControls
{
    public static class PolGumpExporter
    {
        public static void Export(IWin32Window owner, List<CanvasElement> canvasItems, bool isClosable, bool isMovable, bool isDisposable)
        {
            if (!canvasItems.Any())
            {
                MessageBox.Show(owner, "Canvas is empty. Add some gumps first!", "Export POL Gump Script", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("// Gump Definition Generated by UOFiddler Gump Creator Plugin (using GF functions)");
            sb.AppendLine("// Add this to your eScript file, typically inside a function that receives 'mobile'.");
            sb.AppendLine("// Ensure that GF_PAGE_BTN is defined in your script (e.g., Global GF_PAGE_BTN := 1;)");
            sb.AppendLine();

            // GFCreateGump() can take x,y,width,height but often these are determined by content or set by other means.
            // For now, defaulting to 0,0,0,0 as initial gump setup might be minimal with GF.
            sb.AppendLine("var gump := GFCreateGump(0,0,0,0);"); 
            sb.AppendLine($"GFClosable(gump, {(isClosable ? 1 : 0)});");
            sb.AppendLine($"GFDisposable(gump, {(isDisposable ? 1 : 0)});");
            sb.AppendLine($"GFMovable(gump, {(isMovable ? 1 : 0)});");
            sb.AppendLine();

            // Group items by page. The order of pages themselves should be ascending.
            var itemsByPage = canvasItems.GroupBy(item => item.Page).OrderBy(g => g.Key);

            foreach (var pageGroup in itemsByPage)
            {
                sb.AppendLine($"GFPage(gump, {pageGroup.Key});");
                // Iterate through elements in the group. Their order is preserved from canvasItems,
                // which reflects the Z-order.
                foreach (var element in pageGroup) 
                {
                    if (element is CanvasGumpPicItem gumpPic)
                    {
                        if (gumpPic.IsResized)
                        {
                            sb.AppendLine($"    GFResizePic(gump, {gumpPic.X}, {gumpPic.Y}, {gumpPic.GumpId}, {gumpPic.Width}, {gumpPic.Height});");
                        }
                        else
                        {
                            sb.AppendLine($"    GFGumpPic(gump, {gumpPic.X}, {gumpPic.Y}, {gumpPic.GumpId}, {gumpPic.Hue});");
                        }
                    }
                    else if (element is CanvasTextItem textItem)
                    {
                        // Escape double quotes in the text string for POL script
                        string escapedText = textItem.Text.Replace("\"", "\\\""); 
                        sb.AppendLine($"    GFTextLine(gump, {textItem.X}, {textItem.Y}, {textItem.TextColorHue}, \"{escapedText}\");");
                    }
                    else if (element is CanvasButtonItem buttonItem)
                    {
                        string buttonTypeStr;
                        int buttonValue;

                        if (buttonItem.TargetPageId > 0)
                        {
                            buttonTypeStr = "GF_PAGE_BTN"; 
                            buttonValue = buttonItem.TargetPageId;
                        }
                        else
                        {
                            buttonTypeStr = "0"; // Default/generic button type for returning a value
                            buttonValue = buttonItem.ReturnValue;
                        }
                        sb.AppendLine($"    GFAddButton(gump, {buttonItem.X}, {buttonItem.Y}, {buttonItem.ReleasedGumpId}, {buttonItem.PressedGumpId}, {buttonTypeStr}, {buttonValue});");
                    }
                    else if (element is CanvasCheckboxItem checkbox)
                    {
                        // POL Function: GFCheckBox(byref gump, x, y, unc_id, che_id, status:=0, btn_value:=0)
                        sb.AppendLine($"    GFCheckBox(gump, {checkbox.X}, {checkbox.Y}, {checkbox.UncheckedId}, {checkbox.CheckedId}, {(checkbox.InitialStatus ? 1 : 0)}, {checkbox.ButtonValue}); // ElementType: {checkbox.ElementType}");
                    }
                    else if (element is CanvasRadioButtonItem radioButton)
                    {
                        // POL Function: GFSetRadioGroup(byref gump, group_id)
                        // POL Function: GFRadioButton(byref gump, x, y, unp_id, pres_id, status:=0, btn_value:=0)
                        sb.AppendLine($"    GFSetRadioGroup(gump, {radioButton.GroupId}); // Note: Consider optimizing to call once per group");
                        sb.AppendLine($"    GFRadioButton(gump, {radioButton.X}, {radioButton.Y}, {radioButton.UnpressedId}, {radioButton.PressedId}, {(radioButton.InitialStatus ? 1 : 0)}, {radioButton.ButtonValue}); // ElementType: {radioButton.ElementType}, Group: {radioButton.GroupId}");
                    }
                    else if (element is CanvasTextEntryItem textEntry)
                    {
                        // POL Function: GFTextEntry(byref gump, x, y, width, height, txt_color, ini_text:="", txt_id:=0, lmt := 0)
                        string polSafeInitialText = textEntry.InitialText?.Replace("\"", "\\\"") ?? ""; // Basic escaping for quotes, handle null
                        sb.AppendLine($"    GFTextEntry(gump, {textEntry.X}, {textEntry.Y}, {textEntry.Width}, {textEntry.Height}, {textEntry.TextColorHue}, \"{polSafeInitialText}\", {textEntry.TextId}, {textEntry.CharacterLimit}); // ElementType: {textEntry.ElementType}");
                    }
                    // Other element types (e.g. HtmlGump) would need their respective GFAdd... calls here
                }
                sb.AppendLine(); // Add a blank line after each page's elements for readability
            }
            
            sb.AppendLine("// To display the gump to a player:");
            sb.AppendLine("// GFSendGump(mobile, gump);");

            using (var textDialog = new Form())
            {
                textDialog.Text = "Exported POL Gump Script (GF)";
                textDialog.Size = new Size(700, 750);
                textDialog.StartPosition = FormStartPosition.CenterParent;
                var textBox = new TextBox { Multiline = true, Dock = DockStyle.Fill, ScrollBars = ScrollBars.Both, ReadOnly = true, Font = new Font("Consolas", 10), Text = sb.ToString() };
                textDialog.Controls.Add(textBox);
                textDialog.ShowDialog(owner);
            }
        }
    }
} 